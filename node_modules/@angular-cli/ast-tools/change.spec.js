'use strict';
// This needs to be first so fs module can be mocked correctly.
var mockFs = require('mock-fs');
var spec_utils_1 = require('./spec-utils');
var change_1 = require('./change');
var fs = require('fs');
var path = require('path');
var Promise = require('ember-cli/lib/ext/promise');
var readFile = Promise.denodeify(fs.readFile);
describe('Change', function () {
    var sourcePath = 'src/app/my-component';
    beforeEach(function () {
        var mockDrive = {
            'src/app/my-component': {
                'add-file.txt': 'hello',
                'remove-replace-file.txt': 'import * as foo from "./bar"',
                'replace-file.txt': 'import { FooComponent } from "./baz"'
            }
        };
        mockFs(mockDrive);
    });
    afterEach(function () {
        mockFs.restore();
    });
    describe('InsertChange', function () {
        var sourceFile = path.join(sourcePath, 'add-file.txt');
        spec_utils_1.it('adds text to the source code', function () {
            var changeInstance = new change_1.InsertChange(sourceFile, 6, ' world!');
            return changeInstance
                .apply()
                .then(function () { return readFile(sourceFile, 'utf8'); })
                .then(function (contents) {
                expect(contents).toEqual('hello world!');
            });
        });
        spec_utils_1.it('fails for negative position', function () {
            expect(function () { return new change_1.InsertChange(sourceFile, -6, ' world!'); }).toThrowError();
        });
        spec_utils_1.it('adds nothing in the source code if empty string is inserted', function () {
            var changeInstance = new change_1.InsertChange(sourceFile, 6, '');
            return changeInstance
                .apply()
                .then(function () { return readFile(sourceFile, 'utf8'); })
                .then(function (contents) {
                expect(contents).toEqual('hello');
            });
        });
    });
    describe('RemoveChange', function () {
        var sourceFile = path.join(sourcePath, 'remove-replace-file.txt');
        spec_utils_1.it('removes given text from the source code', function () {
            var changeInstance = new change_1.RemoveChange(sourceFile, 9, 'as foo');
            return changeInstance
                .apply()
                .then(function () { return readFile(sourceFile, 'utf8'); })
                .then(function (contents) {
                expect(contents).toEqual('import *  from "./bar"');
            });
        });
        spec_utils_1.it('fails for negative position', function () {
            expect(function () { return new change_1.RemoveChange(sourceFile, -6, ' world!'); }).toThrow();
        });
        spec_utils_1.it('does not change the file if told to remove empty string', function () {
            var changeInstance = new change_1.RemoveChange(sourceFile, 9, '');
            return changeInstance
                .apply()
                .then(function () { return readFile(sourceFile, 'utf8'); })
                .then(function (contents) {
                expect(contents).toEqual('import * as foo from "./bar"');
            });
        });
    });
    describe('ReplaceChange', function () {
        spec_utils_1.it('replaces the given text in the source code', function () {
            var sourceFile = path.join(sourcePath, 'remove-replace-file.txt');
            var changeInstance = new change_1.ReplaceChange(sourceFile, 7, '* as foo', '{ fooComponent }');
            return changeInstance
                .apply()
                .then(function () { return readFile(sourceFile, 'utf8'); })
                .then(function (contents) {
                expect(contents).toEqual('import { fooComponent } from "./bar"');
            });
        });
        spec_utils_1.it('fails for negative position', function () {
            var sourceFile = path.join(sourcePath, 'remove-replace-file.txt');
            expect(function () { return new change_1.ReplaceChange(sourceFile, -6, 'hello', ' world!'); }).toThrow();
        });
        spec_utils_1.it('adds string to the position of an empty string', function () {
            var sourceFile = path.join(sourcePath, 'replace-file.txt');
            var changeInstance = new change_1.ReplaceChange(sourceFile, 9, '', 'BarComponent, ');
            return changeInstance
                .apply()
                .then(function () { return readFile(sourceFile, 'utf8'); })
                .then(function (contents) {
                expect(contents).toEqual('import { BarComponent, FooComponent } from "./baz"');
            });
        });
        spec_utils_1.it('removes the given string only if an empty string to add is given', function () {
            var sourceFile = path.join(sourcePath, 'remove-replace-file.txt');
            var changeInstance = new change_1.ReplaceChange(sourceFile, 9, ' as foo', '');
            return changeInstance
                .apply()
                .then(function () { return readFile(sourceFile, 'utf8'); })
                .then(function (contents) {
                expect(contents).toEqual('import * from "./bar"');
            });
        });
    });
});
//# sourceMappingURL=/Users/hans/Sources/angular-cli/packages/ast-tools/src/change.spec.js.map