"use strict";
var mockFs = require('mock-fs');
var fs = require('fs');
var nru = require('./route-utils');
var path = require('path');
var change_1 = require('./change');
var denodeify = require('denodeify');
var _ = require('lodash');
var spec_utils_1 = require('./spec-utils');
var readFile = denodeify(fs.readFile);
describe('route utils', function () {
    describe('insertImport', function () {
        var sourceFile = 'tmp/tmp.ts';
        beforeEach(function () {
            var mockDrive = {
                'tmp': {
                    'tmp.ts': ''
                }
            };
            mockFs(mockDrive);
        });
        afterEach(function () {
            mockFs.restore();
        });
        spec_utils_1.it('inserts as last import if not present', function () {
            var content = "'use strict'\n import {foo} from 'bar'\n import * as fz from 'fizz';";
            var editedFile = new change_1.InsertChange(sourceFile, 0, content);
            return editedFile.apply()
                .then(function () { return nru.insertImport(sourceFile, 'Router', '@angular/router').apply(); })
                .then(function () { return readFile(sourceFile, 'utf8'); })
                .then(function (newContent) {
                expect(newContent).toEqual(content + "\nimport { Router } from '@angular/router';");
            });
        });
        spec_utils_1.it('does not insert if present', function () {
            var content = "'use strict'\n import {Router} from '@angular/router'";
            var editedFile = new change_1.InsertChange(sourceFile, 0, content);
            return editedFile.apply()
                .then(function () { return nru.insertImport(sourceFile, 'Router', '@angular/router'); })
                .then(function () { return readFile(sourceFile, 'utf8'); })
                .then(function (newContent) {
                expect(newContent).toEqual(content);
            });
        });
        spec_utils_1.it('inserts into existing import clause if import file is already cited', function () {
            var content = "'use strict'\n import { foo, bar } from 'fizz'";
            var editedFile = new change_1.InsertChange(sourceFile, 0, content);
            return editedFile.apply()
                .then(function () { return nru.insertImport(sourceFile, 'baz', 'fizz').apply(); })
                .then(function () { return readFile(sourceFile, 'utf8'); })
                .then(function (newContent) {
                expect(newContent).toEqual("'use strict'\n import { foo, bar, baz } from 'fizz'");
            });
        });
        spec_utils_1.it('understands * imports', function () {
            var content = "\nimport * as myTest from 'tests' \n";
            var editedFile = new change_1.InsertChange(sourceFile, 0, content);
            return editedFile.apply()
                .then(function () { return nru.insertImport(sourceFile, 'Test', 'tests'); })
                .then(function () { return readFile(sourceFile, 'utf8'); })
                .then(function (newContent) {
                expect(newContent).toEqual(content);
            });
        });
        spec_utils_1.it('inserts after use-strict', function () {
            var content = "'use strict';\n hello";
            var editedFile = new change_1.InsertChange(sourceFile, 0, content);
            return editedFile.apply()
                .then(function () { return nru.insertImport(sourceFile, 'Router', '@angular/router').apply(); })
                .then(function () { return readFile(sourceFile, 'utf8'); })
                .then(function (newContent) {
                expect(newContent).toEqual("'use strict';\nimport { Router } from '@angular/router';\n hello");
            });
        });
        spec_utils_1.it('inserts inserts at beginning of file if no imports exist', function () {
            return nru.insertImport(sourceFile, 'Router', '@angular/router').apply()
                .then(function () { return readFile(sourceFile, 'utf8'); })
                .then(function (newContent) {
                expect(newContent).toEqual("import { Router } from '@angular/router';\n");
            });
        });
    });
    describe('bootstrapItem', function () {
        var mainFile = 'tmp/main.ts';
        var prefix = "import {bootstrap} from '@angular/platform-browser-dynamic'; \n" +
            "import { AppComponent } from './app/';\n";
        var routes = { 'provideRouter': ['@angular/router'], 'routes': ['./routes', true] };
        var toBootstrap = 'provideRouter(routes)';
        var routerImport = "import routes from './routes';\n" +
            "import { provideRouter } from '@angular/router'; \n";
        beforeEach(function () {
            var mockDrive = {
                'tmp': {
                    'main.ts': "import {bootstrap} from '@angular/platform-browser-dynamic'; \n" +
                        "import { AppComponent } from './app/'; \n" +
                        'bootstrap(AppComponent);'
                }
            };
            mockFs(mockDrive);
        });
        afterEach(function () {
            mockFs.restore();
        });
        spec_utils_1.it('adds a provideRouter import if not there already', function () {
            return nru.applyChanges(nru.bootstrapItem(mainFile, routes, toBootstrap))
                .then(function () { return readFile(mainFile, 'utf8'); })
                .then(function (content) {
                expect(content).toEqual(prefix + routerImport +
                    'bootstrap(AppComponent, [ provideRouter(routes) ]);');
            });
        });
        xit('does not add a provideRouter import if it exits already', function () {
            return nru.insertImport(mainFile, 'provideRouter', '@angular/router').apply()
                .then(function () { return nru.applyChanges(nru.bootstrapItem(mainFile, routes, toBootstrap)); })
                .then(function () { return readFile(mainFile, 'utf8'); })
                .then(function (content) {
                expect(content).toEqual("import routes from './routes';\n  import { provideRouter } from '@angular/router'; \n  bootstrap(AppComponent, [ provideRouter(routes) ]);");
            });
        });
        xit('does not duplicate import to route.ts ', function () {
            var editedFile = new change_1.InsertChange(mainFile, 100, "\nimport routes from './routes';");
            return editedFile
                .apply()
                .then(function () { return nru.applyChanges(nru.bootstrapItem(mainFile, routes, toBootstrap)); })
                .then(function () { return readFile(mainFile, 'utf8'); })
                .then(function (content) {
                expect(content).toEqual(prefix + routerImport +
                    'bootstrap(AppComponent, [ provideRouter(routes) ]);');
            });
        });
        spec_utils_1.it('adds provideRouter to bootstrap if absent and no providers array', function () {
            return nru.applyChanges(nru.bootstrapItem(mainFile, routes, toBootstrap))
                .then(function () { return readFile(mainFile, 'utf8'); })
                .then(function (content) {
                expect(content).toEqual(prefix + routerImport +
                    'bootstrap(AppComponent, [ provideRouter(routes) ]);');
            });
        });
        spec_utils_1.it('adds provideRouter to bootstrap if absent and empty providers array', function () {
            var editFile = new change_1.InsertChange(mainFile, 124, ', []');
            return editFile.apply()
                .then(function () { return nru.applyChanges(nru.bootstrapItem(mainFile, routes, toBootstrap)); })
                .then(function () { return readFile(mainFile, 'utf8'); })
                .then(function (content) {
                expect(content).toEqual(prefix + routerImport +
                    'bootstrap(AppComponent, [provideRouter(routes)]);');
            });
        });
        spec_utils_1.it('adds provideRouter to bootstrap if absent and non-empty providers array', function () {
            var editedFile = new change_1.InsertChange(mainFile, 124, ', [ HTTP_PROVIDERS ]');
            return editedFile.apply()
                .then(function () { return nru.applyChanges(nru.bootstrapItem(mainFile, routes, toBootstrap)); })
                .then(function () { return readFile(mainFile, 'utf8'); })
                .then(function (content) {
                expect(content).toEqual(prefix + routerImport +
                    'bootstrap(AppComponent, [ HTTP_PROVIDERS, provideRouter(routes) ]);');
            });
        });
        spec_utils_1.it('does not add provideRouter to bootstrap if present', function () {
            var editedFile = new change_1.InsertChange(mainFile, 124, ', [ HTTP_PROVIDERS, provideRouter(routes) ]');
            return editedFile.apply()
                .then(function () { return nru.applyChanges(nru.bootstrapItem(mainFile, routes, toBootstrap)); })
                .then(function () { return readFile(mainFile, 'utf8'); })
                .then(function (content) {
                expect(content).toEqual(prefix + routerImport +
                    'bootstrap(AppComponent, [ HTTP_PROVIDERS, provideRouter(routes) ]);');
            });
        });
        spec_utils_1.it('inserts into the correct array', function () {
            var editedFile = new change_1.InsertChange(mainFile, 124, ', [ HTTP_PROVIDERS, {provide: [BAR]}]');
            return editedFile.apply()
                .then(function () { return nru.applyChanges(nru.bootstrapItem(mainFile, routes, toBootstrap)); })
                .then(function () { return readFile(mainFile, 'utf8'); })
                .then(function (content) {
                expect(content).toEqual(prefix + routerImport +
                    'bootstrap(AppComponent, [ HTTP_PROVIDERS, {provide: [BAR]}, provideRouter(routes)]);');
            });
        });
        spec_utils_1.it('throws an error if there is no or multiple bootstrap expressions', function () {
            var editedFile = new change_1.InsertChange(mainFile, 126, '\n bootstrap(moreStuff);');
            return editedFile.apply()
                .then(function () { return nru.bootstrapItem(mainFile, routes, toBootstrap); })
                .catch(function (e) {
                return expect(e.message).toEqual('Did not bootstrap provideRouter in' +
                    ' tmp/main.ts because of multiple or no bootstrap calls');
            });
        });
        spec_utils_1.it('configures correctly if bootstrap or provide router is not at top level', function () {
            var editedFile = new change_1.InsertChange(mainFile, 126, '\n if(e){bootstrap, provideRouter});');
            return editedFile.apply()
                .then(function () { return nru.applyChanges(nru.bootstrapItem(mainFile, routes, toBootstrap)); })
                .then(function () { return readFile(mainFile, 'utf8'); })
                .then(function (content) {
                expect(content).toEqual(prefix + routerImport +
                    'bootstrap(AppComponent, [ provideRouter(routes) ]);\n if(e){bootstrap, provideRouter});'); // tslint:disable-line
            });
        });
    });
    describe('addPathToRoutes', function () {
        var routesFile = 'src/routes.ts';
        var options = { dir: 'src/app', appRoot: 'src/app', routesFile: routesFile,
            component: 'NewRouteComponent', dasherizedName: 'new-route' };
        var nestedRoutes = "\n  { path: 'home', component: HomeComponent,\n    children: [\n      { path: 'about', component: AboutComponent,\n        children: [\n          { path: 'more', component: MoreComponent }\n        ]\n      }\n    ]\n  }\n";
        beforeEach(function () {
            var mockDrive = {
                'src': {
                    'routes.ts': 'export default [];'
                }
            };
            mockFs(mockDrive);
        });
        afterEach(function () {
            mockFs.restore();
        });
        spec_utils_1.it('adds import to new route component if absent', function () {
            return nru.applyChanges(nru.addPathToRoutes(routesFile, _.merge({ route: 'new-route' }, options)))
                .then(function () { return readFile(routesFile, 'utf8'); })
                .then(function (content) {
                expect(content).toEqual("import { NewRouteComponent } from './app/new-route/new-route.component';\nexport default [\n  { path: 'new-route', component: NewRouteComponent }\n];");
            });
        });
        spec_utils_1.it('throws error if multiple export defaults exist', function () {
            var editedFile = new change_1.InsertChange(routesFile, 20, 'export default {}');
            return editedFile.apply().then(function () {
                return nru.addPathToRoutes(routesFile, _.merge({ route: 'new-route' }, options));
            }).catch(function (e) {
                expect(e.message).toEqual('Did not insert path in routes.ts because '
                    + "there were multiple or no 'export default' statements");
            });
        });
        spec_utils_1.it('throws error if no export defaults exists', function () {
            var editedFile = new change_1.RemoveChange(routesFile, 0, 'export default []');
            return editedFile.apply().then(function () {
                return nru.addPathToRoutes(routesFile, _.merge({ route: 'new-route' }, options));
            }).catch(function (e) {
                expect(e.message).toEqual('Did not insert path in routes.ts because '
                    + "there were multiple or no 'export default' statements");
            });
        });
        spec_utils_1.it('treats positional params correctly', function () {
            var editedFile = new change_1.InsertChange(routesFile, 16, "\n  { path: 'home', component: HomeComponent }\n");
            return editedFile.apply().then(function () {
                options.dasherizedName = 'about';
                options.component = 'AboutComponent';
                return nru.applyChanges(nru.addPathToRoutes(routesFile, _.merge({ route: 'home/about/:id' }, options)));
            })
                .then(function () { return readFile(routesFile, 'utf8'); })
                .then(function (content) {
                expect(content).toEqual("import { AboutComponent } from './app/home/about/about.component';" +
                    "\nexport default [\n" +
                    "  { path: 'home', component: HomeComponent,\n" +
                    "    children: [\n" +
                    "      { path: 'about/:id', component: AboutComponent } " +
                    "\n    ]\n  }\n];");
            });
        });
        spec_utils_1.it('inserts under parent, mid', function () {
            var editedFile = new change_1.InsertChange(routesFile, 16, nestedRoutes);
            return editedFile.apply().then(function () {
                options.dasherizedName = 'details';
                options.component = 'DetailsComponent';
                return nru.applyChanges(nru.addPathToRoutes(routesFile, _.merge({ route: 'home/about/details' }, options)));
            })
                .then(function () { return readFile(routesFile, 'utf8'); })
                .then(function (content) {
                // tslint:disable-next-line
                var expected = "import { DetailsComponent } from './app/home/about/details/details.component';\nexport default [\n  { path: 'home', component: HomeComponent,\n    children: [\n      { path: 'about', component: AboutComponent,\n        children: [\n          { path: 'details', component: DetailsComponent }, \n          { path: 'more', component: MoreComponent }\n        ]\n      }\n    ]\n  }\n];";
                expect(content).toEqual(expected);
            });
        });
        spec_utils_1.it('inserts under parent, deep', function () {
            var editedFile = new change_1.InsertChange(routesFile, 16, nestedRoutes);
            return editedFile.apply().then(function () {
                options.dasherizedName = 'sections';
                options.component = 'SectionsComponent';
                return nru.applyChanges(nru.addPathToRoutes(routesFile, _.merge({ route: 'home/about/more/sections' }, options)));
            })
                .then(function () { return readFile(routesFile, 'utf8'); })
                .then(function (content) {
                // tslint:disable-next-line
                var expected = "import { SectionsComponent } from './app/home/about/more/sections/sections.component';\nexport default [\n  { path: 'home', component: HomeComponent,\n    children: [\n      { path: 'about', component: AboutComponent,\n        children: [\n          { path: 'more', component: MoreComponent,\n            children: [\n              { path: 'sections', component: SectionsComponent } \n            ]\n          }\n        ]\n      }\n    ]\n  }\n];";
                expect(content).toEqual(expected);
            });
        });
        spec_utils_1.it('works well with multiple routes in a level', function () {
            var paths = "\n  { path: 'main', component: MainComponent }\n  { path: 'home', component: HomeComponent,\n    children: [\n      { path: 'about', component: AboutComponent }\n    ]\n  }\n";
            var editedFile = new change_1.InsertChange(routesFile, 16, paths);
            return editedFile.apply().then(function () {
                options.dasherizedName = 'about';
                options.component = 'AboutComponent_1';
                return nru.applyChanges(nru.addPathToRoutes(routesFile, _.merge({ route: 'home/about/:id' }, options)));
            })
                .then(function () { return readFile(routesFile, 'utf8'); })
                .then(function (content) {
                // tslint:disable-next-line
                expect(content).toEqual("import { AboutComponent_1 } from './app/home/about/about.component';\nexport default [\n  { path: 'main', component: MainComponent }\n  { path: 'home', component: HomeComponent,\n    children: [\n      { path: 'about/:id', component: AboutComponent_1 }, \n      { path: 'about', component: AboutComponent }\n    ]\n  }\n];");
            });
        });
        spec_utils_1.it('throws error if repeating child, shallow', function () {
            var editedFile = new change_1.InsertChange(routesFile, 16, nestedRoutes);
            return editedFile.apply().then(function () {
                options.dasherizedName = 'home';
                options.component = 'HomeComponent';
                return nru.addPathToRoutes(routesFile, _.merge({ route: '/home' }, options));
            }).catch(function (e) {
                expect(e.message).toEqual('Route was not added since it is a duplicate');
            });
        });
        spec_utils_1.it('throws error if repeating child, mid', function () {
            var editedFile = new change_1.InsertChange(routesFile, 16, nestedRoutes);
            return editedFile.apply().then(function () {
                options.dasherizedName = 'about';
                options.component = 'AboutComponent';
                return nru.addPathToRoutes(routesFile, _.merge({ route: 'home/about/' }, options));
            }).catch(function (e) {
                expect(e.message).toEqual('Route was not added since it is a duplicate');
            });
        });
        spec_utils_1.it('throws error if repeating child, deep', function () {
            var editedFile = new change_1.InsertChange(routesFile, 16, nestedRoutes);
            return editedFile.apply().then(function () {
                options.dasherizedName = 'more';
                options.component = 'MoreComponent';
                return nru.addPathToRoutes(routesFile, _.merge({ route: 'home/about/more' }, options));
            }).catch(function (e) {
                expect(e.message).toEqual('Route was not added since it is a duplicate');
            });
        });
        spec_utils_1.it('does not report false repeat', function () {
            var editedFile = new change_1.InsertChange(routesFile, 16, nestedRoutes);
            return editedFile.apply().then(function () {
                options.dasherizedName = 'more';
                options.component = 'MoreComponent';
                return nru.applyChanges(nru.addPathToRoutes(routesFile, _.merge({ route: 'more' }, options)));
            })
                .then(function () { return readFile(routesFile, 'utf8'); })
                .then(function (content) {
                var expected = "import { MoreComponent } from './app/more/more.component';\nexport default [\n  { path: 'more', component: MoreComponent },\n  { path: 'home', component: HomeComponent,\n    children: [\n      { path: 'about', component: AboutComponent,\n        children: [\n          { path: 'more', component: MoreComponent }\n        ]\n      }\n    ]\n  }\n];";
                expect(content).toEqual(expected);
            });
        });
        spec_utils_1.it('does not report false repeat: multiple paths on a level', function () {
            var routes = "\n  { path: 'home', component: HomeComponent,\n    children: [\n      { path: 'about', component: AboutComponent,\n        children: [\n          { path: 'more', component: MoreComponent }\n        ]\n      }\n    ]\n  },\n  { path: 'trap-queen', component: TrapQueenComponent}\n";
            var editedFile = new change_1.InsertChange(routesFile, 16, routes);
            return editedFile.apply().then(function () {
                options.dasherizedName = 'trap-queen';
                options.component = 'TrapQueenComponent';
                return nru.applyChanges(nru.addPathToRoutes(routesFile, _.merge({ route: 'home/trap-queen' }, options)));
            })
                .then(function () { return readFile(routesFile, 'utf8'); })
                .then(function (content) {
                // tslint:disable-next-line
                var expected = "import { TrapQueenComponent } from './app/home/trap-queen/trap-queen.component';\nexport default [\n  { path: 'home', component: HomeComponent,\n    children: [\n      { path: 'trap-queen', component: TrapQueenComponent }, \n      { path: 'about', component: AboutComponent,\n        children: [\n          { path: 'more', component: MoreComponent }\n        ]\n      }\n    ]\n  },\n  { path: 'trap-queen', component: TrapQueenComponent}\n];";
                expect(content).toEqual(expected);
            });
        });
        spec_utils_1.it('resolves imports correctly', function () {
            var editedFile = new change_1.InsertChange(routesFile, 16, "\n  { path: 'home', component: HomeComponent }\n");
            return editedFile.apply().then(function () {
                var editedFile = new change_1.InsertChange(routesFile, 0, "import { HomeComponent } from './app/home/home.component';\n");
                return editedFile.apply();
            })
                .then(function () {
                options.dasherizedName = 'home';
                options.component = 'HomeComponent';
                return nru.applyChanges(nru.addPathToRoutes(routesFile, _.merge({ route: 'home/home' }, options)));
            })
                .then(function () { return readFile(routesFile, 'utf8'); })
                .then(function (content) {
                var expected = "import { HomeComponent } from './app/home/home.component';\nimport { HomeComponent as HomeComponent_1 } from './app/home/home/home.component';\nexport default [\n  { path: 'home', component: HomeComponent,\n    children: [\n      { path: 'home', component: HomeComponent_1 } \n    ]\n  }\n];";
                expect(content).toEqual(expected);
            });
        });
        spec_utils_1.it('throws error if components collide and there is repitition', function () {
            var editedFile = new change_1.InsertChange(routesFile, 16, "\n  { path: 'about', component: AboutComponent, \n    children: [\n      { path: 'details/:id', component: DetailsComponent_1 },\n      { path: 'details', component: DetailsComponent }\n    ]\n  }");
            return editedFile.apply().then(function () {
                var editedFile = new change_1.InsertChange(routesFile, 0, "import { AboutComponent } from './app/about/about.component';\nimport { DetailsComponent } from './app/about/details/details.component';\nimport { DetailsComponent as DetailsComponent_1 } from './app/about/description/details.component;\n"); // tslint:disable-line
                return editedFile.apply();
            }).then(function () {
                options.dasherizedName = 'details';
                options.component = 'DetailsComponent';
                expect(function () { return nru.addPathToRoutes(routesFile, _.merge({ route: 'about/details' }, options)); })
                    .toThrowError();
            });
        });
        spec_utils_1.it('adds guard to parent route: addItemsToRouteProperties', function () {
            var path = "\n  { path: 'home', component: HomeComponent }\n";
            var editedFile = new change_1.InsertChange(routesFile, 16, path);
            return editedFile.apply().then(function () {
                var toInsert = { 'home': ['canActivate', '[ MyGuard ]'] };
                return nru.applyChanges(nru.addItemsToRouteProperties(routesFile, toInsert));
            })
                .then(function () { return readFile(routesFile, 'utf8'); })
                .then(function (content) {
                expect(content).toEqual("export default [\n  { path: 'home', component: HomeComponent, canActivate: [ MyGuard ] }\n];");
            });
        });
        spec_utils_1.it('adds guard to child route: addItemsToRouteProperties', function () {
            var path = "\n  { path: 'home', component: HomeComponent }\n";
            var editedFile = new change_1.InsertChange(routesFile, 16, path);
            return editedFile.apply().then(function () {
                options.dasherizedName = 'more';
                options.component = 'MoreComponent';
                return nru.applyChanges(nru.addPathToRoutes(routesFile, _.merge({ route: 'home/more' }, options)));
            })
                .then(function () {
                return nru.applyChanges(nru.addItemsToRouteProperties(routesFile, { 'home/more': ['canDeactivate', '[ MyGuard ]'] }));
            })
                .then(function () {
                return nru.applyChanges(nru.addItemsToRouteProperties(routesFile, { 'home/more': ['useAsDefault', 'true'] }));
            })
                .then(function () { return readFile(routesFile, 'utf8'); })
                .then(function (content) {
                expect(content).toEqual("import { MoreComponent } from './app/home/more/more.component';\nexport default [\n  { path: 'home', component: HomeComponent,\n    children: [\n      { path: 'more', component: MoreComponent, canDeactivate: [ MyGuard ], useAsDefault: true } \n    ]\n  }\n];");
            });
        });
    });
    describe('validators', function () {
        var projectRoot = process.cwd();
        var componentFile = path.join(projectRoot, 'src/app/about/about.component.ts');
        beforeEach(function () {
            var mockDrive = {
                'src': {
                    'app': {
                        'about': {
                            'about.component.ts': 'export class AboutComponent { }'
                        }
                    }
                }
            };
            mockFs(mockDrive);
        });
        afterEach(function () {
            mockFs.restore();
        });
        spec_utils_1.it('accepts component name without \'component\' suffix: resolveComponentPath', function () {
            var fileName = nru.resolveComponentPath(projectRoot, 'src/app', 'about');
            expect(fileName).toEqual(componentFile);
        });
        spec_utils_1.it('accepts component name with \'component\' suffix: resolveComponentPath', function () {
            var fileName = nru.resolveComponentPath(projectRoot, 'src/app', 'about.component');
            expect(fileName).toEqual(componentFile);
        });
        spec_utils_1.it('accepts path absolute from project root: resolveComponentPath', function () {
            var fileName = nru.resolveComponentPath(projectRoot, '', path.sep + "about");
            expect(fileName).toEqual(componentFile);
        });
        spec_utils_1.it('accept component with directory name: resolveComponentPath', function () {
            var fileName = nru.resolveComponentPath(projectRoot, 'src/app', 'about/about.component');
            expect(fileName).toEqual(componentFile);
        });
        spec_utils_1.it('finds component name: confirmComponentExport', function () {
            var exportExists = nru.confirmComponentExport(componentFile, 'AboutComponent');
            expect(exportExists).toBeTruthy();
        });
        spec_utils_1.it('finds component in the presence of decorators: confirmComponentExport', function () {
            var editedFile = new change_1.InsertChange(componentFile, 0, '@Component{}\n');
            return editedFile.apply().then(function () {
                var exportExists = nru.confirmComponentExport(componentFile, 'AboutComponent');
                expect(exportExists).toBeTruthy();
            });
        });
        spec_utils_1.it('report absence of component name: confirmComponentExport', function () {
            var editedFile = new change_1.RemoveChange(componentFile, 21, 'onent');
            return editedFile.apply().then(function () {
                var exportExists = nru.confirmComponentExport(componentFile, 'AboutComponent');
                expect(exportExists).not.toBeTruthy();
            });
        });
    });
});
//# sourceMappingURL=/Users/hans/Sources/angular-cli/packages/ast-tools/src/route-utils.spec.js.map